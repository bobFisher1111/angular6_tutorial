/*
    - Angular 6 Notes:
        - Tutorial for Angular Covered here plus other notes on the way:
            https://www.youtube.com/watch?v=3ZkGUI6KNHY&list=PLqq-6Pq4lTTb7JGBTogaJ8bm7f8VCvFkj&index=23
        - Need to go back over:
            - The view:
            - deploying production with ng build, creates dist and had issues with it working with http-server dist/project-one,
                - http-server is npm package
        - Things to learn for future beyond this intro course
            - more on routing, with dependency injections
        
        - Intro:
            - Angular Technologies:
                - JavaScript / TypeScript
                - Angular CLI
                - Reactive programming, RxJS, Observables, operators
                - Testing:
                    - Jasmine, Karma
                - Redux, ngRx
            - Setting up Angular:
                - install node.js // run time environment
                    - Check the latest version of node:
                        - node -v
                    - Check the version of npm:
                        - npm -v
                - install Angular CLI:
                   - npm install -g @angular/cli -g
                   - Check the version of angular:
                        - ng --version
                   - Create angular app:
                        - ng new app_name
                   - Start Angular app:
                        - ng serve // only used or development, not in production
            - Building Angular Application:
                - When deploying Application:
                    - You dont want to use ng serve, only used for development
                    - You want to compress it down to html,css,javascript in one folder production By  
                        - 1st Create dist folder to hold html, css, javaScript:
                            - ng build
                            - for production
                                - ng build --prod
                        - 2nd install npm module called http-server:
                            - npm install http-server -g
                        - run it with location:
                            - http-server dist/projectNAme

            - File Structure:
                - src: 
                    - source code is held
                    - File Directory:
                        - app:
                            - app.component.spec.ts // used for unit testing
                        - assets:
                        - environments:
                        - favicon.ico 
                        - index.hmtl
                        - main.ts 
                        - polyfills.ts 
                        - styles.css
                        - test.ts
                        - tsconfig.app.json
                        - tsconfig.spec.json
                        - typing.d.ts 
                - package.json
                    - list of 3rd party Dependency/packages
                - node_modules:
                    - where Dependency, packages held
                - e2e:
                    End-to-End Testing
            - These 3 Files Render the view:
                - app-rout: 
                    - Location:
                        - app: These 3 files provides the functionality of the app
                            - view:
                                - src/app/app.component.hmtl
                                - src/app/app.component.css
                            - backend logic:
                                - src/app/app.component.ts
            - {{ ..... }} // Evaluation
                - What you put that it will run, and give result
                - Example:
                    1 + 1 = 2

            - 2 Types of imports:
                - Both are required!
                - typedScript import:
                    import { ViewModuleModule } from './view-module/view-module.module';
                - angular import:
                    imports: [
                        BrowserModule,
                        AppRoutingModule,
                        HttpClientModule,
                        ViewModuleModule
                    ],

            - Annoations:
                - @Component --> Angular Component
                - @NgModule --> Angular Module
                - @Injectable --> Angular Service

            - @NgModule:
                - declareations:
                    - contain all the component in module
                - imports:
                    - contain all the other modules this module depends on
                - providers:
                    - contain all the services in module

            - component life-cycle method groups:
                - ngOnInit:
                    - Called once, after the first ngOnChanges()
                - ngOnChanges:
                    - Called before ngOnInit() and whenever one of input properties change
                - ngOnDestroy:
                    - Called just before Anugular destroys the directive/component
                - ngDoCheck:
                    - Called during every change detection run
                - ngAfterContentChecked:
                    - Called after the ngAfterContentInit and every subsequent ngDoCheck()
                - ngAFterViewChecked:
                    - Called after the ngAfterViewInit() and every subsequent ngAfterContentCheck()
                - ngAfterContentInit:
                    - Called once after the first ngDoCheck()
                - ngAfterViewInit:
                    - Called once after the first ngAfterContentChecked()
                - constructor:
                    - Will be executed before any life-style function
            
            - Shared Space:
                - app.component.ts & app.module.ts etc. are shared space for the inner modules and compoents
     
        - Components:
            - Every Angular component is mainly a TypeScript class. Think of html and css files as just extra attachments,
                to the main TypeScript file
            - HTML & JavaScript way:
                - Example:  Get date and time
                    - HTML is static
                        - Add div and paragraph // for time and date
                        - Add button // for button
                    - JavaScript is dynamic
                        - Code to get date / time  // for time and date
                        - Get the paragraph DOM element // for time and date
                        - Update value // for time and date
                        - Code function to handle button click // for button
            - Component Based Model Way of doing it:
                - Create components from elements:
                    - Like header, sidebar, footer, body, etc
                    - Also it can have nested components inside of components:
                        - main component with summary and details components inside it
                    - Example: Creating a component for header 
                        - Create an hmtl tag for it:
                            - "tag represents the root of an HTML document"
                            - Give it a name like header-selection
                            - Then use it like this:
                                <header-selection></header-selection>
                        - First: Create Root Component
                        - Second: Create component date and component click
            - Create New Component:
                - Use cli:
                    - Create Component:
                        - ng generate component componentName
                    - Files It creates and updates:
                        - creates:
                            -  src/app/component-name/component-name.component.css
                            -  src/app/component-name/component-name.component.html
                            -  src/app/component-name/component-name.component.ts
                            -  src/app/component-name/component-name.component.spec.ts
                        - updates:
                            - src/app/app.modules.ts
                    - Use the component:
                        - Find the selector tag found here:
                            - src/app/component-name/component-name.component.ts
                            - example:
                                selector: 'app-turtle'
                        - Create a tag from it and place it in the src/app/app.component.html, this creates an instance of component created
                            <app-turtle></app-turtle>
                - Example 1: Adding date to component created:
                    - Create new component called date:
                        - ng generate component date
                    - Creating selector and placing in app.component.html to initialize it
                            <app-date></app-date>
                    - Adding functioality getting the date: Work withdate.component.ts files

        - Data Binding:
            - Data binding in Angular refers to binding data in the component instance to the html template. Any changes to the data
                automatically get updated in the view
            - Automatic synchronization of data between the model and view components. Allows you to change values at run time. Dynamic
            - One-Way Binding:
                - Variables:
                    - html file
                        - <!-- Reference typedscript code here: using {{ variableName }}-->
                        <p>Checking on the date, {{ message }}</p>
                    - typedScript file:
                        message: string = "Hello";
                - Use date class:
                    - html file:
                        <p>What is today's date: {{ date_ }}</p>
                    - typedScript file:
                        date_: string = new Date().toDateString(); // add date class and convert to a string
            - Data Binding and Async:
                - Example:
                    - Every second call this value and set it to variable and call it
                - setInterva()
                    - is JavaScript API lets you run a function at regular time intervals
                    - first agurment is the callback, method going to be used
                    - second argument is how often, so for every second 1000 as milliseconds 

        - Templates:
            - template interpolation:
                - {{ ..... }} 
                    - What you put that it will run, and give result
                    - Example:
                        1 + 1 = 2

        - Looping with ngFor:
            - <p *ngFor="let x of user.phone">{{x}}</p>
        
        - If statement ngIf:
            // loops through if phone less than 0, does not display phone
            <div *ngIf="user.phone.lenght > 0">
                <p *ngFor="let x of user.phone">{{x}}</p>

        - Passing inputs to components:
            - Go to app.component.html
                - use the selector to pass in data:
                - example:
                    <app-address-card></app-address-card>
            - Go to address-card.component.ts:
                - use annotation @Input()
                    - create a variable and use annotation:
                        @Input() userName: string; // this will hold the value being passed for function

        - ngOnInit lifecycle hook:
            - doc:
                https://angular.io/guide/lifecycle-hooks
            - Lifecycle of an angular component:
                - if trying to pass code in the construct, it will not have time to populate the data before being used and will hold empty values.
                - When you want something to happen after initialize, then use a hook
            - ngOnInit:
                - Initialize the directive or component after Angular first displays the data-bound properties and sets the directive or component's input properties

        - Passing Member Variables to Components:
            - Passing in an object to the component:
                - 1st: create a class that defines what object should be in typedscript
                    - create new file:
                        user.model.ts // name of class is user, give it a .module because class in angular supposed to be modules
                - 2nd:
                    - make changes to address.component.ts file
                - 3rd: 
                    - Go to app.component.ts
                        - create an instance in the constructor, maybe have to make the constructor, hard coding the values for now
                        - Also import it here
                            import { User } from './address-card/user.model.ts
                            user: User; // make this global
                            constructor(){
                                this.user: User = new User();
                            }
                - 4th:
                    - go to app.component.html  
                        // putting [] not to put a variable but to look for global variable and pass it, if done without square backets will just pass it as 
                            a variable
                        - <app-address-card [name] = "user"></app-address-card>

        - Styling Angular Components:
            - Styling locally:
                - When stying with angular components, you don't have to worry about the .css file inside the component your working effect stuff outside
                    the component when comes to styling. Only style happens is to stuff inside that component. 
            - Styling Globally
                - When wanting to style something across the entire use styles.css found in the root of src directory

        - Handling Click Events:
            - In the app-card.component.ts add this to the class:
                // Used for click events:
                isColapsed : boolean = true;
                // below constructor, create a function // reason maybe for best practice. Not really sure
                togleCollapse(){
                    this.isColapsed = !this.isColapsed;
                 }
            - In the address-card.component.html
                - create a new div on what you want to collapse
                <div *ngIf="!isColapsed">....</div>
            - Add a button html 
                - Make the browser ignore it and used for angular, add () around it
            - Or make it where instead expand and collapse togther, make it click expand then click to collapse

        - Using Multiple Modules: Create module with nested component 
            - app.module info:
                - The modules declarations like: "AddressCardComponent", is apart of the export class AppModule { } 
            - When building components, make them for a feature. Dont just create one with everything focus on a topic, that way it can be reused
            - Create a module:
                - ng generate module moduleName
                - Will only contain module.ts files
                    - no declarations just 1 import called CommonModule
            - Create a component inside of the module just created:
                - ng generate component directory_where_module_created/moduleName-component
                    - example:
                        ng generate component view-module/view-module-component
            - Import module created with its components into the app root module: "app.mdoule.ts":
                - Inside app.module.ts
                    - add this at top
                        - import { ViewModuleModule } from './view-module/view-module.module';
                    - add this to:
                        @NgModule({
                            .......
                            imports:[
                                ....,
                                ViewModuleModule 
                            ]
                        })
                - inside the view-module.module.ts:
                    - add this: exports to @NgModule
                        @NgModule({
                            .......
                            imports:[],
                            exports: [ViewModuleComponentComponent]
                        })
                    
        - Creating a service:
            - Methods & class that can work across multiple components
            - How to create a service:
                - ng generate service serviceName
                - it will populate in the app directory
            - How it works:
                - Inside service.ts file, this annotation tells angular its a service"
                    @Injectable
                - Declare it inside the module you want to import it to
                    - Put it inide the providers, providers hold all the services for module
                        @NgModule({
                            providers: [
                                ServiceOneService
                            ]
                        })
                    - Also Import it at the top for typedScript
                        import { ServiceOneService } from './service-one.service';
            - Use Service:
                - Calling function / method: One instance:
                    - let svc = new ServiceOneService(); // create an instance 
                      svc.printToConsole // call the method
                - By using Dependency Injection (Better Way than just calling for one instance)
                    - tell framework needs a specific service, framework, runtime controls handles objects and injects them into the code,
                        tells angular needs an instance of service itself
                    - Great way to create utility methods of service to across components
                    -  create an argument to the constructor of that type
                        - Example:
                            // So when need an instance it passes it to svc and gives it to us
                            constructor(svc: ServiceOneService){
                            }
                        - Example 2: save it as a member variable:
                            - Long Way: Same Results
                                private svc: ServiceOneService; // member variable

                                constructor(svc: ServiceOneService){
                                    this.svc = svc;
                                }
                            - Better Way: Same Results, this allows to reference to member variable instead of the argument
                                 this.constructor(private svc: ServiceOneService){
                                }
                - Service Injection Context: // do it in the app.component so that way its shared across components/modules
                    - In order to use Components outside of modules:
                        - 1. Module needs to export it
                        - 2. Module wanting to use it needs to import it
                    - Services work a little different:
                        - Lets say you have app.module, service.ts in the app root directory. But want to use that service in the   
                            inner module. You dont have to do anything to the inner module. Just import it in the iner compontent.ts    
                            and it will work because the inner module is connected to the app.component and its already there.

            - Making REST Calls with HttpClient:
                - Import module in the root module: "app.module.ts", that way it's used everywhere, commonly shared modules, best practice
                - Notes:
                    The endpoint URL.
                        Constructs a GET request that interprets the body as a JSON object and returns the response body as a JSON object.
                        @return — An Observable of the response body as a JSON 
                - Using it in app.component.ts:
                    - import it at the top:
                        import { HttpClient } from '@angular/common/http';
                    - add it to the constructor: with member variable as private
                         constructor(private http: HttpClient){
                         }
                    - Use it the ngOnInit(), if not there then correct it:
                        - ngOnInit(){
                            this.http.get('URL')
                        }

            - Creating in the view component that I created a functionality where user searches for a name on git hub and 
                there is a button and it prints out the json response
                - Example found in the restful-get component
                    - instead of using div *ngIf to not cause an issue another alternative is " ?"
                        {{response ?.login }} // shortcut, but for this example ngIf better because we dont want to see all the varbiables
                            that will still be there using shortcut
            
            - Angular Routing:
                - Single Page:
                    - It allows click on something allows without a full page refresh, switches between views
                - The switch between views called Routes:
                - Routing Concepts:
                    - URL based routing:
                        - navigation controlled by url routing:
                            - example:
                                - html tells which view to go to
                                    - foo.com/view1 
                                    - or 
                                    - foo.com/view2
                    - Component Based Routing:
                        - Each view controlled by it's own component: One component per view
                        - Make one root component per view, and each component has its own tree
                - Combine both url based routing with component based routing, thats how angular routing works:
                    - Map it like this:
                        - Views:                 Urls:                Components:
                         - view 1             foo.com/view1            Component 1
                         - view 2             foo.com/view2            Component 2
                         - view 3             foo.com/view3            Component 3
                - Create Multi View Angular Application:
                    - 1st: 
                        - Define your route URLs 
                    - 2nd:
                        - Create Angular Components for each view (one fore each route)
                    - 3rd:
                        - Configure Anguarl to map route URLs to components 
            
            - Create An Angular Project With Routing:
                - When creating angular application and if it doesn't ask automatically when creating add routing,
                    use this command: ng new angularAppName --routing
                - When Created it looks similar but with these files added:
                    - to package.json:
                        - added to dependency:
                            "@angular/router": version number
                    - app.module.ts:
                        - Include at top:
                            import { AppRoutingModule } from './app-routing.module';
                        - included this imports:
                            @NgModule({
                                imports[AppRoutingModule]
                    - Created file:
                        app.routing.module.ts:
                            - Replace these:
                                - import { Routes, RouterModule } from '@angular/router';
                                - const routes: Routes = []; replace it with 
                            - With:
                                - import { Route, RouterModule } from '@angular/router';
                                - const routes: Route[] = [
                                        // will be an array of objects
                                        {path: 'view1', component: component1}.
                                        {path: 'view2', component: component2}
                                        {path: 'view3', component: component3}
                                    ];
                            - Then it will pass it to @NgModule({
                                imports; [RouteModule.forRoot(routes)],
                            })
            - Creating Routes
                - First create the components
                - Then in the app-routing.module.ts, import the components  
                    import { HomeComponent } from './home/home.component';
                    import { SettingsComponent } from './settings/settings.component'; // added this for restfulGet component created
                - Then map the components in the app-routing.module.ts:
                    // Creating route
                    const routes: Route[] = [
                    // only need path and component to match one another
                    {path: 'home', component: HomeComponent},
                    {path: 'settings', component: SettingsComponent}
                    ];
                - Inside app.component.html, add this, it should already be there:
                     <router-outlet></router-outlet>
                     - When angular sees it, injects the contents of component loaded int router-outlet, renders it in the router-outlet
                        component

            - Route Redirects and Whildcards:
                - Setup a default route, automatically direct to home
                    - // only need path and component to match one another
                      // give it full instead of prefix, so it will give wildcard and show error, and send compent created to give message
                      {path: '', redirectTo: '/home', pathMatch: 'full'}, // this makes it the default route, automatically have home at end like localhost:4200/home
                      {path: 'home', component: HomeComponent},
                - Handle errors, show message, using wildcards, using a '**', 2 stars
                    - Create a component to show error massage:
                        - For example:
                            - Name component: page-not-found, and go to the page-not-found-component.html
                            - Give it a error message

            - Nested Routes/Child Routes:
                - Will be using settings component created for this as the parent:
                - This also can continue with nesting with like a tree just continue with next level down
                - In the app.routing.moudles, under const routes: there is a property called children, add it to the settings
                - This will create nested route/child route:
                    - Created 2 children: profile & 
                    - Should automatically import in the app.routing.module
                - Need to add <router-outlet></router-outlet> to parent compoent.html, this case would be settings
                - add this to the app.routing.module.ts:
                    - // Creating route
                      const routes: Route[] = [
                          {
                          path: 'settings', 
                          component: SettingsComponent,
                          children: [
                              // remove '/' infront of profile so it will work or it would go directly to root, this makes profile default to settings
                              {path: '', redirectTo: 'profile', pathMatch: 'full'},  
                              {path: 'profile', component: SettingsProfileComponent},
                              {path: 'contact', component: SettingsContactComponent},
                              // incase user puts invalid url after settings for settings it will automatically redirect to profile
                              {path: '**',redirectTo: 'profile', pathMatch: 'full'}
                              ]
                          },
                      ];

            - Naviagation for routes:
                - Click on the link and swtich between routes:
                - Use routerLink instead of href="", because href="" will re load page, routerLink does not, in single page application,
                    we don't want to re load the page
                - In the app.component.html, add links here:
                    <a routerLink="home">Home</a>
                    <br>
                    <a routerLink="setting">Settings</a>
                - Member variable way of doing it:
                    - app.component.html:
                        <!-- This uses the member variable to look up, placed inside the app.component.ts -->
                        <a [routerLink]="contactRoute">Contact</a>
                    - app.component.ts:
                        export class AppComponent {
                            // used for naviagation:
                            contactRoute = "settings/contact"
                        }
                - Another way dynamically render using object: // Preffered way
                    // loop through array, instead of doing hard coding
                     - app.component.ts:
                        export class AppComponent {
                           routes = [
                               { linkName: 'Home', url: 'home'},
                               { linkName: 'settings', url: 'settings'},
                           ]
                        }
                    - app.component.html:
                        <a *ngFor="let route of routes" [routeLink] = "route.url">{{route.linkName}}</a>
                - Can do samething for for child for setting dynamically with object, by moving changes above to above to 
                    - settings.component.ts & settings.component.html

            - Left off at last video



                    


*/
/*
    - Notes For Project:
        - First Create link:
        - Then that link, links to page that displays 6 charts
        - Possible Charts tuturorial found on youtube:
            https://www.youtube.com/watch?v=RTzi5DS7On4
*/