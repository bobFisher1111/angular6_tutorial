/*
    - Angular 6 Notes:
        - Need to go back over:
            - The view:
        
        - Intro:
            - Angular Technologies:
                - JavaScript / TypeScript
                - Angular CLI
                - Reactive programming, RxJS, Observables, operators
                - Testing:
                    - Jasmine, Karma
                - Redux, ngRx
            - Setting up Angular:
                - install node.js // run time environment
                    - Check the latest version of node:
                        - node -v
                    - Check the version of npm:
                        - npm -v
                - install Angular CLI:
                   - npm install -g @angular/cli -g
                   - Check the version of angular:
                        - ng --version
                   - Create angular app:
                        - ng new app_name
                   - Start Angular app:
                        - ng serve
            - File Structure:
                - src: 
                    - source code is held
                    - File Directory:
                        - app:
                            - app.component.spec.ts // used for unit testing
                        - assets:
                        - environments:
                        - favicon.ico 
                        - index.hmtl
                        - main.ts 
                        - polyfills.ts 
                        - styles.css
                        - test.ts
                        - tsconfig.app.json
                        - tsconfig.spec.json
                        - typing.d.ts 
                - package.json
                    - list of 3rd party Dependency/packages
                - node_modules:
                    - where Dependency, packages held
                - e2e:
                    End-to-End Testing
            - These 3 Files Render the view:
                - app-rout: 
                    - Location:
                        - app: These 3 files provides the functionality of the app
                            - view:
                                - src/app/app.component.hmtl
                                - src/app/app.component.css
                            - backend logic:
                                - src/app/app.component.ts
            - {{ ..... }} // Evaluation
                - What you put that it will run, and give result
                - Example:
                    1 + 1 = 2

            - 2 Types of imports:
                - Both are required!
                - typedScript import:
                    import { ViewModuleModule } from './view-module/view-module.module';
                - angular import:
                    imports: [
                        BrowserModule,
                        AppRoutingModule,
                        HttpClientModule,
                        ViewModuleModule
                    ],

            - Annoations:
                - @Component --> Angular Component
                - @NgModule --> Angular Module
                - @Injectable --> Angular Service

            - @NgModule:
                - declareations:
                    - contain all the component in module
                - imports:
                    - contain all the other modules this module depends on
                - providers:
                    - contain all the services in module
     
        - Components:
            - Every Angular component is mainly a TypeScript class. Think of html and css files as just extra attachments,
                to the main TypeScript file
            - HTML & JavaScript way:
                - Example:  Get date and time
                    - HTML is static
                        - Add div and paragraph // for time and date
                        - Add button // for button
                    - JavaScript is dynamic
                        - Code to get date / time  // for time and date
                        - Get the paragraph DOM element // for time and date
                        - Update value // for time and date
                        - Code function to handle button click // for button
            - Component Based Model Way of doing it:
                - Create components from elements:
                    - Like header, sidebar, footer, body, etc
                    - Also it can have nested components inside of components:
                        - main component with summary and details components inside it
                    - Example: Creating a component for header 
                        - Create an hmtl tag for it:
                            - "tag represents the root of an HTML document"
                            - Give it a name like header-selection
                            - Then use it like this:
                                <header-selection></header-selection>
                        - First: Create Root Component
                        - Second: Create component date and component click
            - Create New Component:
                - Use cli:
                    - Create Component:
                        - ng generate component componentName
                    - Files It creates and updates:
                        - creates:
                            -  src/app/component-name/component-name.component.css
                            -  src/app/component-name/component-name.component.html
                            -  src/app/component-name/component-name.component.ts
                            -  src/app/component-name/component-name.component.spec.ts
                        - updates:
                            - src/app/app.modules.ts
                    - Use the component:
                        - Find the selector tag found here:
                            - src/app/component-name/component-name.component.ts
                            - example:
                                selector: 'app-turtle'
                        - Create a tag from it and place it in the src/app/app.component.html, this creates an instance of component created
                            <app-turtle></app-turtle>
                - Example 1: Adding date to component created:
                    - Create new component called date:
                        - ng generate component date
                    - Creating selector and placing in app.component.html to initialize it
                            <app-date></app-date>
                    - Adding functioality getting the date: Work withdate.component.ts files

        - Data Binding:
            - Data binding in Angular refers to binding data in the component instance to the html template. Any changes to the data
                automatically get updated in the view
            - Automatic synchronization of data between the model and view components. Allows you to change values at run time. Dynamic
            - One-Way Binding:
                - Variables:
                    - html file
                        - <!-- Reference typedscript code here: using {{ variableName }}-->
                        <p>Checking on the date, {{ message }}</p>
                    - typedScript file:
                        message: string = "Hello";
                - Use date class:
                    - html file:
                        <p>What is today's date: {{ date_ }}</p>
                    - typedScript file:
                        date_: string = new Date().toDateString(); // add date class and convert to a string
            - Data Binding and Async:
                - Example:
                    - Every second call this value and set it to variable and call it
                - setInterva()
                    - is JavaScript API lets you run a function at regular time intervals
                    - first agurment is the callback, method going to be used
                    - second argument is how often, so for every second 1000 as milliseconds 

        - Templates:
            - template interpolation:
                - {{ ..... }} 
                    - What you put that it will run, and give result
                    - Example:
                        1 + 1 = 2

        - Looping with ngFor:
            - <p *ngFor="let x of user.phone">{{x}}</p>
        
        - If statement ngIf:
            // loops through if phone less than 0, does not display phone
            <div *ngIf="user.phone.lenght > 0">
                <p *ngFor="let x of user.phone">{{x}}</p>

        - Passing inputs to components:
            - Go to app.component.html
                - use the selector to pass in data:
                - example:
                    <app-address-card></app-address-card>
            - Go to address-card.component.ts:
                - use annotation @Input()
                    - create a variable and use annotation:
                        @Input() userName: string; // this will hold the value being passed for function

        - ngOnInit lifecycle hook:
            - doc:
                https://angular.io/guide/lifecycle-hooks
            - Lifecycle of an angular component:
                - if trying to pass code in the construct, it will not have time to populate the data before being used and will hold empty values.
                - When you want something to happen after initialize, then use a hook
            - ngOnInit:
                - Initialize the directive or component after Angular first displays the data-bound properties and sets the directive or component's input properties

        - Passing Member Variables to Components:
            - Passing in an object to the component:
                - 1st: create a class that defines what object should be in typedscript
                    - create new file:
                        user.model.ts // name of class is user, give it a .module because class in angular supposed to be modules
                - 2nd:
                    - make changes to address.component.ts file
                - 3rd: 
                    - Go to app.component.ts
                        - create an instance in the constructor, maybe have to make the constructor, hard coding the values for now
                        - Also import it here
                            import { User } from './address-card/user.model.ts
                            user: User; // make this global
                            constructor(){
                                this.user: User = new User();
                            }
                - 4th:
                    - go to app.component.html  
                        // putting [] not to put a variable but to look for global variable and pass it, if done without square backets will just pass it as 
                            a variable
                        - <app-address-card [name] = "user"></app-address-card>

        - Styling Angular Components:
            - Styling locally:
                - When stying with angular components, you don't have to worry about the .css file inside the component your working effect stuff outside
                    the component when comes to styling. Only style happens is to stuff inside that component. 
            - Styling Globally
                - When wanting to style something across the entire use styles.css found in the root of src directory

        - Handling Click Events:
            - In the app-card.component.ts add this to the class:
                // Used for click events:
                isColapsed : boolean = true;
                // below constructor, create a function // reason maybe for best practice. Not really sure
                togleCollapse(){
                    this.isColapsed = !this.isColapsed;
                 }
            - In the address-card.component.html
                - create a new div on what you want to collapse
                <div *ngIf="!isColapsed">....</div>
            - Add a button html 
                - Make the browser ignore it and used for angular, add () around it
            - Or make it where instead expand and collapse togther, make it click expand then click to collapse

        - Using Multiple Modules: Create module with nested component 
            - app.module info:
                - The modules declarations like: "AddressCardComponent", is apart of the export class AppModule { } 
            - When building components, make them for a feature. Dont just create one with everything focus on a topic, that way it can be reused
            - Create a module:
                - ng generate module moduleName
                - Will only contain module.ts files
                    - no declarations just 1 import called CommonModule
            - Create a component inside of the module just created:
                - ng generate component directory_where_module_created/moduleName-component
                    - example:
                        ng generate component view-module/view-module-component
            - Import module created with its components into the app root module: "app.mdoule.ts":
                - Inside app.module.ts
                    - add this at top
                        - import { ViewModuleModule } from './view-module/view-module.module';
                    - add this to:
                        @NgModule({
                            .......
                            imports:[
                                ....,
                                ViewModuleModule 
                            ]
                        })
                - inside the view-module.module.ts:
                    - add this: exports to @NgModule
                        @NgModule({
                            .......
                            imports:[],
                            exports: [ViewModuleComponentComponent]
                        })
                    
        - Creating a service:
            - Methods & class that can work across multiple components
            - How to create a service:
                - ng generate service serviceName
                - it will populate in the app directory
            - How it works:
                - Inside service.ts file, this annotation tells angular its a service"
                    @Injectable
                - Declare it inside the module you want to import it to
                    - Put it inide the providers, providers hold all the services for module
                        @NgModule({
                            providers: [
                                ServiceOneService
                            ]
                        })
                    - Also Import it at the top for typedScript
                        import { ServiceOneService } from './service-one.service';
            - Use Service:
                - By using Dependency Injection
                // left off here video 21


                

*/
/*
    - Notes For Project:
        - First Create link:
        - Then that link, links to page that displays 6 charts
*/